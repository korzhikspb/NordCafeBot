import os
import logging
import html  # –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ HTML
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ContentType
)
from aiogram.utils import executor
from dotenv import load_dotenv

from database import (
    init_db, add_registration, create_event, get_all_events, get_event_by_id,
    delete_event, delete_registrations_for_event, get_registrations_by_event, delete_registration
)

# -----------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò / –û–ö–†–£–ñ–ï–ù–ò–ï
# -----------------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

def parse_admin_ids(s: str) -> list:
    if not s:
        return []
    parts = [p.strip() for p in s.replace(";", ",").split(",")]
    ids = []
    for p in parts:
        try:
            ids.append(int(p))
        except Exception:
            pass
    return ids

# –†–µ–∑–µ—Ä–≤–Ω—ã–µ ID –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –±—ç–∫–∞–ø
ADMINS = parse_admin_ids(os.getenv("ADMIN_IDS", "")) or [21997374, 650845266]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# -----------------------------
# –§–û–†–ú–ê–¢–´ –î–ê–¢/–í–†–ï–ú–ï–ù–ò
# -----------------------------
ISO_FMT = "%Y-%m-%d %H:%M"   # –∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î
DISP_FMT = "%H:%M %d.%m"     # –∫–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ –≥–æ–¥–∞)

def iso_to_disp(iso_str: str) -> str:
    """YYYY-MM-DD HH:MM -> HH:MM DD.MM"""
    try:
        return datetime.strptime(iso_str, ISO_FMT).strftime(DISP_FMT)
    except Exception:
        return iso_str  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π

# -----------------------------
# –¢–ï–ö–°–¢–´ –ö–ù–û–ü–û–ö
# -----------------------------
BTN_EVENTS = "üìÖ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
BTN_MYREGS = "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏"
BTN_BACK   = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
BTN_CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
BTN_SEND_PHONE = "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
BTN_SEND_USERNAME = "üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º"

# -----------------------------
# CALLBACK PREFIXES
# -----------------------------
CB_EVENT      = "ev"       # ev:<event_id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
CB_EVENT_LIST = "evlist"   # –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
CB_SIGNUP     = "su"       # su:<event_id> ‚Äî –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
CB_CANCEL_REG = "cancel"   # cancel:<event_id> ‚Äî –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏

# -----------------------------
# "–°–æ—Å—Ç–æ—è–Ω–∏—è" –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞—Ä—è–º–∏
# -----------------------------
STEP_EVENT, STEP_NAME, STEP_SEATS, STEP_PHONE = range(4)
ADMIN_ADD_TITLE, ADMIN_ADD_DATETIME, ADMIN_ADD_PLACE, ADMIN_ADD_DESC = range(4)
ADMIN_DEL_WAIT_ID, ADMIN_DEL_CONFIRM = range(2)

user_states = {}    # per-user: –∑–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
add_states = {}     # per-admin: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
delete_states = {}  # per-admin: —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è

# -----------------------------
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# -----------------------------
def main_menu_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(BTN_EVENTS), KeyboardButton(BTN_MYREGS))
    return kb

def admin_menu_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"))
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"))
    kb.add(KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"))
    kb.add(KeyboardButton(BTN_BACK), KeyboardButton(BTN_CANCEL))
    return kb

def back_cancel_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton(BTN_BACK), KeyboardButton(BTN_CANCEL))
    return kb

def phone_request_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row(KeyboardButton(BTN_SEND_PHONE, request_contact=True),
           KeyboardButton(BTN_SEND_USERNAME))
    kb.add(KeyboardButton(BTN_BACK), KeyboardButton(BTN_CANCEL))
    return kb

def seats_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row(KeyboardButton("1"), KeyboardButton("2"), KeyboardButton("3"), KeyboardButton("4"))
    kb.add(KeyboardButton(BTN_BACK), KeyboardButton(BTN_CANCEL))
    return kb

def events_inline_kb(events) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    for ev in events:
        ev_id, name, desc, dt, place = ev
        title = f"{name} ‚Ä¢ {iso_to_disp(dt)}"
        kb.add(InlineKeyboardButton(title, callback_data=f"{CB_EVENT}:{ev_id}"))
    return kb

def details_inline_kb(event_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"{CB_SIGNUP}:{event_id}"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data=CB_EVENT_LIST))
    return kb

def myregs_back_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(BTN_BACK))
    return kb

# -----------------------------
# HELPERS
# -----------------------------
def esc(s: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è HTML parse_mode."""
    return html.escape(s or "")

async def send_lines_html(message: types.Message, lines, reply_markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (HTML parse_mode).
    """
    max_len = 4000  # –∑–∞–ø–∞—Å –∫ –ª–∏–º–∏—Ç—É 4096
    buf = ""
    first = True
    for line in lines:
        part = (("\n" if buf else "") + line)
        if len(buf) + len(part) > max_len:
            await message.answer(buf, parse_mode="HTML",
                                 reply_markup=reply_markup if first else None)
            first = False
            buf = line
        else:
            buf += part
    if buf:
        await message.answer(buf, parse_mode="HTML",
                             reply_markup=reply_markup if first else None)
def reset_user_state(user_id: int):
    user_states.pop(user_id, None)

def reset_admin_states(user_id: int):
    add_states.pop(user_id, None)
    delete_states.pop(user_id, None)

def reg_seats_safe(reg_tuple) -> int:
    """–î–æ—Å—Ç–∞—ë—Ç seats –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ 1."""
    try:
        return int(reg_tuple[3])
    except Exception:
        return 1

async def show_events_list(target) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—É–¥—É—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (—Ç–µ–∫—Å—Ç + –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏).
    target: types.Message –ò–õ–ò chat_id (int)
    """
    if isinstance(target, types.Message):
        chat_id = target.chat.id
        uid = target.from_user.id
    else:
        chat_id = int(target)
        uid = chat_id

    events = await get_all_events()
    now_str = datetime.now().strftime(ISO_FMT)
    upcoming_events = [ev for ev in events if ev[3] >= now_str]

    if not upcoming_events:
        await bot.send_message(chat_id, "üì≠ –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", reply_markup=main_menu_kb())
        return

    user_states[uid] = {'step': STEP_EVENT, 'events': upcoming_events}
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=back_cancel_kb())
    await bot.send_message(chat_id, "–°–æ–±—ã—Ç–∏—è:", reply_markup=events_inline_kb(upcoming_events))

# -----------------------------
# –ö–û–ú–ê–ù–î–´: /start, /help, /whoami, /admin
# -----------------------------
@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    reset_user_state(message.from_user.id)
    reset_admin_states(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è NORD Coffee Base üíö\n"
        "–Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –¥–∞—Ç—É, –≤—Ä–µ–º—è, —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è üìù\n"
        "–í–∞–∂–Ω–æ ‚òùÔ∏è –ú–µ—Å—Ç–∞ –±—Ä–æ–Ω–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã ‚Äî —Å –≤–∞–º–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂—É—Ç—Å—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu_kb()
    )

@dp.message_handler(commands=['whoami'])
async def whoami(message: types.Message):
    await message.reply(f"–í–∞—à Telegram ID: {message.from_user.id}")

@dp.message_handler(commands=['admin'])
async def cmd_admin(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    reset_admin_states(message.from_user.id)
    await message.answer("–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=admin_menu_kb())

# -----------------------------
# –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –§–õ–û–£
# -----------------------------
@dp.message_handler(lambda m: m.text == BTN_EVENTS)
async def user_list_events(message: types.Message):
    await show_events_list(message)

@dp.message_handler(lambda m: m.text == BTN_BACK)
async def go_back(message: types.Message):
    uid = message.from_user.id
    # –µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤ –ø–æ–¥—à–∞–≥–µ ‚Äî –≤–µ—Ä–Ω—ë–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
    if uid in add_states or uid in delete_states:
        reset_admin_states(uid)
        if uid in ADMINS:
            return await message.answer("–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=admin_menu_kb())

    st = user_states.get(uid)
    if st and st.get('step') in (STEP_NAME, STEP_SEATS, STEP_PHONE, STEP_EVENT):
        return await show_events_list(message.chat.id)
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())

@dp.message_handler(lambda m: m.text == BTN_CANCEL)
async def cancel_everything(message: types.Message):
    reset_user_state(message.from_user.id)
    reset_admin_states(message.from_user.id)
    # –µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω ‚Äî –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —Ç–æ–∂–µ –≤–µ—Ä–Ω—ë–º –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    if message.from_user.id in ADMINS:
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.", reply_markup=admin_menu_kb())
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu_kb())

# Fallback: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get('step') == STEP_EVENT)
async def choose_event_fallback(message: types.Message):
    if message.text in (BTN_BACK, BTN_CANCEL):
        return
    st = user_states.get(message.from_user.id, {})
    events_list = st.get('events')
    if not events_list:
        return await show_events_list(message.chat.id)

    chosen_event = None
    for ev in events_list:
        ev_id, ev_name, _, _, _ = ev
        if message.text.strip().lower() == ev_name.lower() or message.text.strip().startswith(str(ev_id)):
            chosen_event = ev
            break
    if not chosen_event:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.")

    ev_id, ev_name, ev_desc, ev_dt, ev_place = chosen_event
    lines = [f"üóì {ev_name}", f"‚Ä¢ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {iso_to_disp(ev_dt)}", f"‚Ä¢ –ú–µ—Å—Ç–æ: {ev_place or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'}"]
    if ev_desc:
        lines.append(f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {ev_desc}")
    await message.answer("\n".join(lines), reply_markup=details_inline_kb(ev_id))

# –ò–Ω–ª–∞–π–Ω: –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏—è
@dp.callback_query_handler(lambda c: c.data and c.data.startswith(f"{CB_EVENT}:"))
async def show_event_details_cb(call: types.CallbackQuery):
    try:
        event_id = int(call.data.split(":")[1])
    except Exception:
        return await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è.", show_alert=True)

    ev = await get_event_by_id(event_id)
    if not ev:
        return await call.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    ev_id, ev_name, ev_desc, ev_dt, ev_place = ev
    lines = [f"üóì {ev_name}", f"‚Ä¢ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {iso_to_disp(ev_dt)}", f"‚Ä¢ –ú–µ—Å—Ç–æ: {ev_place or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'}"]
    if ev_desc:
        lines.append(f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {ev_desc}")
    await call.message.answer("\n".join(lines), reply_markup=details_inline_kb(ev_id))
    await call.answer()

# –ò–Ω–ª–∞–π–Ω: –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
@dp.callback_query_handler(lambda c: c.data == CB_EVENT_LIST)
async def back_to_event_list_cb(call: types.CallbackQuery):
    await show_events_list(call.message.chat.id)
    await call.answer()

# –ò–Ω–ª–∞–π–Ω: –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
@dp.callback_query_handler(lambda c: c.data and c.data.startswith(f"{CB_SIGNUP}:"))
async def signup_cb(call: types.CallbackQuery):
    try:
        event_id = int(call.data.split(":")[1])
    except Exception:
        return await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è.", show_alert=True)

    ev = await get_event_by_id(event_id)
    if not ev:
        return await call.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

    regs = await get_registrations_by_event(event_id)
    if any(reg[0] == call.from_user.id for reg in regs):
        return await call.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.", show_alert=True)

    ev_id, ev_name, ev_desc, ev_dt, ev_place = ev
    user_states[call.from_user.id] = {'step': STEP_NAME, 'event_id': ev_id, 'event_name': ev_name}
    await call.message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏: \"{ev_name}\"\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=back_cancel_kb())
    await call.answer()

# –®–∞–≥–∏ –∑–∞–ø–∏—Å–∏: –∏–º—è -> –º–µ—Å—Ç–∞ -> —Ç–µ–ª–µ—Ñ–æ–Ω
@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get('step') == STEP_NAME)
async def step_name(message: types.Message):
    if message.text == BTN_BACK:
        return await show_events_list(message.chat.id)
    if message.text == BTN_CANCEL:
        return await cancel_everything(message)

    name = message.text.strip()
    user_states[message.from_user.id]['name'] = name
    user_states[message.from_user.id]['step'] = STEP_SEATS
    await message.answer("–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –±—Ä–æ–Ω–∏—Ä—É–µ—Ç–µ?\n–í—ã–±–µ—Ä–∏—Ç–µ 1‚Äì4:", reply_markup=seats_kb())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get('step') == STEP_SEATS)
async def step_seats(message: types.Message):
    if message.text == BTN_BACK:
        user_states[message.from_user.id]['step'] = STEP_NAME
        return await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=back_cancel_kb())
    if message.text == BTN_CANCEL:
        return await cancel_everything(message)

    try:
        seats = int(message.text.strip())
    except Exception:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4 –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", reply_markup=seats_kb())

    if seats < 1 or seats > 4:
        return await message.answer("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ—Ç 1 –¥–æ 4 –º–µ—Å—Ç.", reply_markup=seats_kb())

    user_states[message.from_user.id]['seats'] = seats
    user_states[message.from_user.id]['step'] = STEP_PHONE
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @username:", reply_markup=phone_request_kb())

@dp.message_handler(lambda m: user_states.get(m.from_user.id, {}).get('step') == STEP_PHONE,
                    content_types=[ContentType.TEXT, ContentType.CONTACT])
async def step_phone(message: types.Message):
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if message.content_type == ContentType.TEXT:
        if message.text == BTN_BACK:
            user_states[message.from_user.id]['step'] = STEP_SEATS if 'seats' in user_states.get(message.from_user.id, {}) else STEP_NAME
            return await message.answer("–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –±—Ä–æ–Ω–∏—Ä—É–µ—Ç–µ? (1‚Äì4)" if user_states[message.from_user.id]['step'] != STEP_NAME else "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                                        reply_markup=seats_kb() if user_states[message.from_user.id]['step'] != STEP_NAME else back_cancel_kb())
        if message.text == BTN_CANCEL:
            return await cancel_everything(message)

    st = user_states.get(message.from_user.id, {})
    if not st:
        return await message.answer("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_kb())

    # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: –Ω–æ–º–µ—Ä / @username / —Ç–µ–∫—Å—Ç
    if message.content_type == ContentType.CONTACT and message.contact:
        contact_value = message.contact.phone_number
    elif message.content_type == ContentType.TEXT and message.text == BTN_SEND_USERNAME:
        uname = message.from_user.username
        if not uname:
            return await message.answer(
                "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @username –≤ Telegram. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä/–Ω–∏–∫ –≤—Ä—É—á–Ω—É—é:",
                reply_markup=phone_request_kb()
            )
        contact_value = f"@{uname}"
    else:
        contact_value = message.text.strip()

    event_id = st.get('event_id')
    name = st.get('name')
    seats = st.get('seats', 1)

    # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª—è
    registrations = await get_registrations_by_event(event_id)
    if any(reg[0] == message.from_user.id for reg in registrations):
        reset_user_state(message.from_user.id)
        return await message.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.", reply_markup=main_menu_kb())

    # –∑–∞–ø–∏—Å—å –≤ –ë–î (–∫–æ–ª–æ–Ω–∫–∞ seats —É–∂–µ –µ—Å—Ç—å)
    await add_registration(event_id, message.from_user.id, name, contact_value, seats)

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                "üí• –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n"
                f"‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {st.get('event_name')}\n"
                f"‚Ä¢ –ò–º—è: {name}\n"
                f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç: {contact_value}\n"
                f"‚Ä¢ –ú–µ—Å—Ç: {seats}"
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    reset_user_state(message.from_user.id)
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, {name}! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ \"{st.get('event_name')}\" (–º–µ—Å—Ç: {seats}).\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
        reply_markup=main_menu_kb()
    )

# -----------------------------
# ¬´–ú–û–ò –ó–ê–ü–ò–°–ò¬ª –∏ –æ—Ç–º–µ–Ω–∞
# -----------------------------
@dp.message_handler(lambda m: m.text == BTN_MYREGS)
async def user_list_registrations(message: types.Message):
    events = await get_all_events()
    user_id = message.from_user.id
    user_regs = []
    for ev in events:
        ev_id, name, desc, dt, place = ev
        regs = await get_registrations_by_event(ev_id)
        for reg in regs:
            if reg[0] == user_id:
                seats = reg_seats_safe(reg)
                user_regs.append((ev_id, name, dt, place, seats))

    if not user_regs:
        return await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_menu_kb())

    lines = ["–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:"]
    kb_inline = InlineKeyboardMarkup()
    for idx, (ev_id, ev_name, ev_dt, ev_place, seats) in enumerate(user_regs, start=1):
        lines.append(f"{idx}. {ev_name} ‚Äì {iso_to_disp(ev_dt)} @ {ev_place or '(–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)'} ‚Äî –º–µ—Å—Ç: {seats}")
        kb_inline.add(InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∞ {idx}", callback_data=f"{CB_CANCEL_REG}:{ev_id}"))
    await message.answer("\n".join(lines), reply_markup=myregs_back_kb())
    await message.answer("–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø—É–Ω–∫—Ç–æ–º:", reply_markup=kb_inline)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith(f"{CB_CANCEL_REG}:"))
async def cancel_registration_callback(call: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º; —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤."""
    user_id = call.from_user.id
    try:
        event_id = int(call.data.split(":")[1])
    except Exception:
        return await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.", show_alert=True)

    ev = await get_event_by_id(event_id)
    regs = await get_registrations_by_event(event_id)
    this_reg = next((r for r in regs if r[0] == user_id), None)

    await delete_registration(event_id, user_id)

    if ev and this_reg:
        _, ev_name, _, ev_dt, ev_place = ev
        _, reg_name, reg_phone = this_reg[0:3]
        seats = reg_seats_safe(this_reg)
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMINS:
            try:
                await bot.send_message(
                    admin_id,
                    "‚ùé –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏:\n"
                    f"‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {ev_name} ({iso_to_disp(ev_dt)}, {ev_place or '–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'})\n"
                    f"‚Ä¢ –ò–º—è: {reg_name}\n"
                    f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {reg_phone}\n"
                    f"‚Ä¢ –ú–µ—Å—Ç: {seats}"
                )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    # –æ–±–Ω–æ–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫
    events = await get_all_events()
    still = []
    for ev2 in events:
        e_id, name, desc, dt, place = ev2
        rs = await get_registrations_by_event(e_id)
        for r in rs:
            if r[0] == user_id:
                still.append((e_id, name, dt, place, reg_seats_safe(r)))

    try:
        await call.message.edit_reply_markup()
    except Exception:
        pass

    if not still:
        await bot.send_message(user_id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_menu_kb())
    else:
        lines = ["–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:"]
        kb_inline = InlineKeyboardMarkup()
        for idx, (e_id, ev_name2, ev_dt2, ev_place2, seats2) in enumerate(still, start=1):
            lines.append(f"{idx}. {ev_name2} ‚Äì {iso_to_disp(ev_dt2)} @ {ev_place2 or '(–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)'} ‚Äî –º–µ—Å—Ç: {seats2}")
            kb_inline.add(InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∞ {idx}", callback_data=f"{CB_CANCEL_REG}:{e_id}"))
        await bot.send_message(user_id, "\n".join(lines), reply_markup=myregs_back_kb())
        await bot.send_message(user_id, "–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø—É–Ω–∫—Ç–æ–º:", reply_markup=kb_inline)

    await call.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# -----------------------------
# –ê–î–ú–ò–ù: —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ / –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ / —É–¥–∞–ª–µ–Ω–∏–µ
# -----------------------------
@dp.message_handler(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def admin_list_participants(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    events = await get_all_events()
    if not events:
        return await message.answer("üì≠ –°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=admin_menu_kb())

    lines = ["<b>üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b>"]
    for ev in events:
        ev_id, name, desc, dt, place = ev
        lines.append(f"<b>{esc(name)}</b> ({iso_to_disp(dt)}, {esc(place) if place else '–º–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'})")
        regs = await get_registrations_by_event(ev_id)
        total = 0
        if regs:
            for reg in regs:
                # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ö–µ–º—É —Å seats (–µ—Å–ª–∏ –µ—Å—Ç—å)
                _, reg_name, reg_contact = reg[0:3]
                try:
                    seats = int(reg[3])
                except Exception:
                    seats = 1
                total += seats
                # –ö–æ–Ω—Ç–∞–∫—Ç –≤ <code> ‚Äî –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–µ —Å–ª–æ–º–∞—é—Ç —Ñ–æ—Ä–º–∞—Ç
                lines.append(f"‚Ä¢ {esc(reg_name)} ‚Äî <code>{esc(reg_contact)}</code> (–º–µ—Å—Ç: {seats})")
        else:
            lines.append("‚Ä¢ (–Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π)")
        lines.append(f"–ò—Ç–æ–≥–æ –º–µ—Å—Ç: {total}")
        lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    await send_lines_html(message, lines, reply_markup=admin_menu_kb())

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def admin_add_event_menu(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    add_states[message.from_user.id] = {'step': ADMIN_ADD_TITLE}
    await message.answer("üÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=back_cancel_kb())

@dp.message_handler(lambda m: add_states.get(m.from_user.id, {}).get('step') == ADMIN_ADD_TITLE)
async def admin_add_title(message: types.Message):
    if message.text == BTN_CANCEL:
        reset_admin_states(message.from_user.id)
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu_kb())
    if message.text == BTN_BACK:
        reset_admin_states(message.from_user.id)
        return await cmd_admin(message)

    add_states[message.from_user.id]['title'] = message.text.strip()
    add_states[message.from_user.id]['step'] = ADMIN_ADD_DATETIME
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:", reply_markup=back_cancel_kb())

@dp.message_handler(lambda m: add_states.get(m.from_user.id, {}).get('step') == ADMIN_ADD_DATETIME)
async def admin_add_datetime(message: types.Message):
    if message.text == BTN_CANCEL:
        reset_admin_states(message.from_user.id)
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu_kb())
    if message.text == BTN_BACK:
        add_states[message.from_user.id]['step'] = ADMIN_ADD_TITLE
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=back_cancel_kb())

    dt_text = message.text.strip()
    try:
        dt_parsed = datetime.strptime(dt_text, ISO_FMT)
    except Exception:
        return await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ YYYY-MM-DD HH:MM:", reply_markup=back_cancel_kb())

    add_states[message.from_user.id]['date_time'] = dt_parsed.strftime(ISO_FMT)
    add_states[message.from_user.id]['step'] = ADMIN_ADD_PLACE
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:", reply_markup=back_cancel_kb())

@dp.message_handler(lambda m: add_states.get(m.from_user.id, {}).get('step') == ADMIN_ADD_PLACE)
async def admin_add_place(message: types.Message):
    if message.text == BTN_CANCEL:
        reset_admin_states(message.from_user.id)
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu_kb())
    if message.text == BTN_BACK:
        add_states[message.from_user.id]['step'] = ADMIN_ADD_DATETIME
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è YYYY-MM-DD HH:MM:", reply_markup=back_cancel_kb())

    add_states[message.from_user.id]['place'] = message.text.strip()
    add_states[message.from_user.id]['step'] = ADMIN_ADD_DESC
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è):", reply_markup=back_cancel_kb())

@dp.message_handler(lambda m: add_states.get(m.from_user.id, {}).get('step') == ADMIN_ADD_DESC)
async def admin_add_description(message: types.Message):
    if message.text == BTN_CANCEL:
        reset_admin_states(message.from_user.id)
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu_kb())
    if message.text == BTN_BACK:
        add_states[message.from_user.id]['step'] = ADMIN_ADD_PLACE
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:", reply_markup=back_cancel_kb())

    st = add_states.pop(message.from_user.id, None)
    if st is None:
        return await message.answer("–°–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.", reply_markup=admin_menu_kb())

    desc_text = message.text.strip()
    if desc_text == '-' or desc_text == '':
        desc_text = ''
    await create_event(st['title'], desc_text, st['date_time'], st['place'])

    await message.answer(
        f"‚úÖ –°–æ–±—ã—Ç–∏–µ \"{st['title']}\" —Å–æ–∑–¥–∞–Ω–æ:\n"
        f" ‚Ä¢ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {iso_to_disp(st['date_time'])}\n"
        f" ‚Ä¢ –ú–µ—Å—Ç–æ: {st['place'] or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'}\n"
        f" ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {desc_text or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'}",
        reply_markup=admin_menu_kb()
    )

@dp.message_handler(lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def admin_delete_event_menu(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    delete_states[message.from_user.id] = {'step': ADMIN_DEL_WAIT_ID}
    events = await get_all_events()
    if not events:
        delete_states.pop(message.from_user.id, None)
        return await message.answer("–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=admin_menu_kb())
    lst = "\n".join([f"{ev[0]}. {ev[1]} ({iso_to_disp(ev[3])})" for ev in events])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:\n" + lst, reply_markup=back_cancel_kb())

@dp.message_handler(lambda m: delete_states.get(m.from_user.id, {}).get('step') == ADMIN_DEL_WAIT_ID)
async def admin_delete_event_get_id(message: types.Message):
    if message.text == BTN_CANCEL:
        reset_admin_states(message.from_user.id)
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu_kb())
    if message.text == BTN_BACK:
        reset_admin_states(message.from_user.id)
        return await cmd_admin(message)

    try:
        event_id = int(message.text.strip())
    except Exception:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", reply_markup=back_cancel_kb())

    ev = await get_event_by_id(event_id)
    if not ev:
        return await message.answer("–°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ID.", reply_markup=back_cancel_kb())

    delete_states[message.from_user.id] = {'step': ADMIN_DEL_CONFIRM, 'event_id': event_id, 'event_name': ev[1]}
    await message.answer(
        f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å \"{ev[1]}\"?\n–í–≤–µ–¥–∏—Ç–µ **–î–ê** –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode='Markdown', reply_markup=back_cancel_kb()
    )

@dp.message_handler(lambda m: delete_states.get(m.from_user.id, {}).get('step') == ADMIN_DEL_CONFIRM)
async def admin_delete_event_confirm(message: types.Message):
    if message.text == BTN_CANCEL:
        reset_admin_states(message.from_user.id)
        return await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu_kb())
    if message.text == BTN_BACK:
        delete_states[message.from_user.id]['step'] = ADMIN_DEL_WAIT_ID
        return await admin_delete_event_menu(message)

    st = delete_states.pop(message.from_user.id, None)
    if not st:
        return await message.answer("–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.", reply_markup=admin_menu_kb())

    if message.text.strip().lower() not in ["–¥–∞", "yes"]:
        return await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu_kb())

    event_id = st['event_id']
    await delete_registrations_for_event(event_id)
    await delete_event(event_id)
    await message.answer("üóë –ì–æ—Ç–æ–≤–æ. –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=admin_menu_kb())


# -----------------------------
# –°–¢–ê–†–¢
# -----------------------------
async def on_startup(dp):
    await init_db()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞, –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)